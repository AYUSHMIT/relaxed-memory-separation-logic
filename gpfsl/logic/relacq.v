From iris.algebra Require Import auth.
From iris.bi Require Import monpred.
From iris.base_logic.lib Require Import wsat.
From iris.proofmode Require Import proofmode monpred modality_instances.

From gpfsl.base_logic Require Import vprop history.
From gpfsl.base_logic Require Import frame_instances.

Require Import iris.prelude.options.

Implicit Types tid : thread_id.

Local Existing Instances
  histGpreS_tview hist_inG
  .

Section RelAcq.
  Context `{histGS Œ£}.
  Local Notation vProp := (vProp Œ£).
  Implicit Types (P Q : vProp).

  Definition acq_mod_def tid P : vProp :=
    ‚àÉ ùì•, ‚é° own tid (‚óØ to_latT ùì•) ‚é§ ‚àó @{ùì•.(acq)} P.
  Definition acq_mod_aux : seal (@acq_mod_def). Proof. by eexists. Qed.
  Definition acq_mod := unseal (@acq_mod_aux).
  Definition acq_mod_eq : @acq_mod = _ := seal_eq _.

  Definition rel_mod_def tid P : vProp :=
    ‚àÉ ùì•, ‚é° own tid (‚óØ to_latT ùì•) ‚é§ ‚àó @{ùì•.(frel)} P.
  Definition rel_mod_aux : seal (@rel_mod_def). Proof. by eexists. Qed.
  Definition rel_mod := unseal (@rel_mod_aux).
  Definition rel_mod_eq : @rel_mod = _ := seal_eq _.
End RelAcq.

Global Instance: Params (@rel_mod) 3 := {}.
Global Instance: Params (@acq_mod) 3 := {}.

Notation "‚ñ≥{ tid } P" := (rel_mod tid P%I)
  (at level 20, right associativity, format "‚ñ≥{ tid }  P"): bi_scope.

Notation "‚ñΩ{ tid } P" := (acq_mod tid P%I)
  (at level 20, right associativity, format "‚ñΩ{ tid }  P"): bi_scope.

Local Ltac unseal :=
  rewrite ?acq_mod_eq ?rel_mod_eq /acq_mod_def /rel_mod_def.

Section RelAcqProp.
  Context `{histGS Œ£}.
  Local Notation vProp := (vProp Œ£).
  Local Notation iProp := (iProp Œ£).
  Implicit Types (P Q: vProp).

  Lemma rel_objectively_intro P tid :
    <obj> P ==‚àó ‚ñ≥{tid} P.
  Proof.
    unseal. iIntros "obj".
    iExists ‚àÖ. rewrite -view_at_objectively. iFrame "obj".
    rewrite (_: (‚óØ to_latT (‚àÖ: threadView) : authR _) = Œµ) //.
    rewrite -embed_bupd. by iApply own_unit.
  Qed.

  Lemma rel_True_intro tid : ‚ä¢|==> ‚ñ≥{tid} True.
  Proof. iApply rel_objectively_intro. by iIntros "!>". Qed.

  Lemma rel_sep_objectively P Q tid :
    ‚ñ≥{tid} P ‚àó <obj> Q ‚ä¢ ‚ñ≥{tid} (P ‚àó Q).
  Proof.
    unseal. iIntros "[rel obj]".
    iDestruct "rel" as (ùì•) "[own P]".
    iExists ùì•. iFrame "own P". by rewrite -view_at_objectively.
  Qed.

  Lemma rel_mono_objectively P Q tid :
    ‚ñ≥{tid} P ‚àó <obj> (P -‚àó Q) ‚ä¢ ‚ñ≥{tid} Q.
  Proof.
    unseal. iIntros "[rel obj]".
    iDestruct "rel" as (ùì•) "[own P]".
    iExists ùì•. iFrame "own". by iApply (view_at_objectively with "obj").
  Qed.

  Lemma rel_mono P Q tid :
    (P ‚ä¢ Q) ‚Üí ‚ñ≥{tid} P ‚ä¢ ‚ñ≥{tid} Q.
  Proof.
    iIntros (PQ). unseal. iDestruct 1 as (ùì•) "[own P]".
    iExists ùì•. iFrame "own". by rewrite PQ.
  Qed.

  Lemma rel_pure_elim œÜ tid :
    (‚ñ≥{tid} ‚åú œÜ ‚åù) ‚ä¢ ‚åú œÜ ‚åù.
  Proof.
    unseal. iDestruct (1) as (?) "[_ ?]". by rewrite view_at_pure.
  Qed.

  Lemma rel_and_elim P Q tid :
    ‚ñ≥{tid} (P ‚àß Q) ‚ä¢ ‚ñ≥{tid} P ‚àß ‚ñ≥{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own PQ]".
    iSplit; iExists ùì•; iFrame "#"; by [rewrite bi.and_elim_l|rewrite bi.and_elim_r].
  Qed.

  Lemma rel_or_elim P Q tid :
    ‚ñ≥{tid} (P ‚à® Q) ‚ä¢ ‚ñ≥{tid} P ‚à® ‚ñ≥{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own [P|Q]]";
      [iLeft|iRight]; iExists ùì•; by iFrame "#".
  Qed.

  Lemma rel_or_intro P Q tid :
    ‚ñ≥{tid} P ‚à® ‚ñ≥{tid} Q ‚ä¢ ‚ñ≥{tid} (P ‚à® Q).
  Proof.
    unseal. iIntros "[P|Q]".
    - iDestruct "P" as (ùì•) "[own P]". iExists _. by iFrame.
    - iDestruct "Q" as (ùì•) "[own Q]". iExists _. by iFrame.
  Qed.

  Lemma rel_or P Q tid :
    ‚ñ≥{tid} P ‚à® ‚ñ≥{tid} Q ‚ä£‚ä¢ ‚ñ≥{tid} (P ‚à® Q).
  Proof. iSplit; [by iApply rel_or_intro|by iApply rel_or_elim]. Qed.

  Lemma rel_exist {A: Type} (Œ®: A ‚Üí vProp) tid :
    (‚ñ≥{tid} ‚àÉ x, Œ® x) ‚ä£‚ä¢ ‚àÉ x, ‚ñ≥{tid} Œ® x.
  Proof.
    unseal. setoid_rewrite view_at_exist. setoid_rewrite bi.sep_exist_l.
    by rewrite bi.exist_exist.
  Qed.

  Lemma rel_forall_elim {A: Type} (Œ®: A ‚Üí vProp) tid :
    (‚ñ≥{tid} ‚àÄ x, Œ® x) ‚ä¢ ‚àÄ x, ‚ñ≥{tid} Œ® x.
  Proof.
    unseal. setoid_rewrite view_at_forall. setoid_rewrite bi.sep_forall_l.
    by rewrite bi.exist_forall.
  Qed.

  Lemma rel_sep_elim P Q tid :
    ‚ñ≥{tid} (P ‚àó Q) ‚ä¢ ‚ñ≥{tid} P ‚àó ‚ñ≥{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own [P Q]]". iSplitL "P"; iExists ùì•; by iFrame "#".
  Qed.

  Lemma rel_sep_intro P Q tid :
     ‚ñ≥{tid} P ‚àó ‚ñ≥{tid} Q ‚ä¢ ‚ñ≥{tid} (P ‚àó Q).
  Proof.
    unseal. iIntros "[P Q]".
    iDestruct "P" as (ùì•1) "[#own1 P]". iDestruct "Q" as (ùì•2) "[#own2 Q]".
    iExists (ùì•1 ‚äî ùì•2). iFrame "P Q".
    rewrite -lat_op_join' auth_frag_op own_op. by iFrame "own1 own2".
  Qed.

  Lemma rel_sep P Q tid :
    ‚ñ≥{tid} P ‚àó ‚ñ≥{tid} Q ‚ä£‚ä¢ ‚ñ≥{tid} (P ‚àó Q).
  Proof. iSplit; [by iApply rel_sep_intro|by iApply rel_sep_elim]. Qed.

  Lemma rel_wand_1 P Q tid :
    ‚ñ≥{tid} (P -‚àó Q) ‚ä¢ (‚ñ≥{tid} P -‚àó ‚ñ≥{tid} Q).
  Proof.
    unseal. iDestruct 1 as (ùì•1) "[own1 PQ]". iDestruct 1 as (ùì•2) "[own2 P]".
    iExists (join ùì•1 ùì•2). iSplitL "own1 own2".
    - rewrite -lat_op_join' auth_frag_op own_op. by iFrame.
    - iApply (view_at_mono_2 with "PQ [P]"); [solve_lat|]. by iFrame "P".
  Qed.

  Lemma rel_later_intro `{fancy_updates.invGS Œ£} P tid E :
    ‚ñ∑ (‚ñ≥{tid} P) ={E}=‚àó ‚ñ≥{tid} ‚ñ∑ P.
  Proof.
    unseal. iDestruct 1 as (?) "[>own P]". iIntros "!>". iExists _.
    rewrite view_at_later. iFrame.
  Qed.

  Lemma rel_later_elim P tid :
    (‚ñ≥{tid} ‚ñ∑ P) ‚ä¢ ‚ñ∑ ‚ñ≥{tid} P.
  Proof.
    unseal. iDestruct 1 as (?) "[own P]". rewrite view_at_later. iExists _. by iFrame.
  Qed.
  Lemma rel_laterN_elim P tid n :
    (‚ñ≥{tid} ‚ñ∑^n P) ‚ä¢ ‚ñ∑^n ‚ñ≥{tid} P.
  Proof.
    unseal. iDestruct 1 as (?) "[own P]". rewrite view_at_laterN. iExists _. by iFrame.
  Qed.
  Lemma rel_except_0 P tid : ‚ñ≥{tid} ‚óá P ‚ä¢ ‚óá ‚ñ≥{tid} P.
  Proof.
    unseal. rewrite bi.except_0_exist.
    setoid_rewrite bi.except_0_sep. setoid_rewrite view_at_except_0.
    by setoid_rewrite <-(bi.except_0_intro (‚é° own _ _ ‚é§)).
  Qed.

  Lemma rel_bupd P tid : (‚ñ≥{tid} |==> P) ‚ä¢ |==> ‚ñ≥{tid} P.
  Proof.
    unseal. rewrite -bupd_exist. setoid_rewrite <-bupd_sep.
    setoid_rewrite view_at_bupd.
    by setoid_rewrite <-(bupd_intro (‚é° own _ _ ‚é§)).
  Qed.
  Lemma rel_fupd `{fancy_updates.invGS Œ£} (E1 E2 : coPset) P tid :
    ‚ñ≥{tid} (|={E1,E2}=> P) ‚ä¢ |={E1,E2}=> ‚ñ≥{tid} P.
  Proof. unseal. iDestruct 1 as (ùì•) "[own >P]". eauto. Qed.

  Lemma rel_objectively_elim P tid :
    (‚ñ≥{tid} <obj> P) ‚ä¢ <obj> P.
  Proof.
    unseal. iDestruct 1 as (?) "[_ P]". by rewrite view_at_objective_iff.
  Qed.

  Lemma rel_embed_elim (P: iProp) tid :
    (‚ñ≥{tid} ‚é° P ‚é§) ‚ä¢ ‚é° P ‚é§.
  Proof.
    unseal. iDestruct (1) as (?) "[_ ?]". by rewrite view_at_embed.
  Qed.

  Lemma rel_subjective P tid :
    ‚ñ≥{tid} P ‚ä¢ <subj> P.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[_ P]". by rewrite view_at_subjectively.
  Qed.

  Lemma rel_affinely P tid :
    <affine> ‚ñ≥{tid} P ‚ä¢ ‚ñ≥{tid} <affine> P.
  Proof.
    unseal. rewrite bi.affinely_exist. setoid_rewrite bi.affinely_sep.
    setoid_rewrite view_at_affinely.
    by setoid_rewrite (bi.affinely_elim ‚é° own _ _ ‚é§).
  Qed.
  Lemma rel_affinely_if P tid b :
    <affine>?b ‚ñ≥{tid} P ‚ä¢ ‚ñ≥{tid} <affine>?b P.
  Proof. destruct b; [apply rel_affinely|done]. Qed.

  Lemma rel_persistently P tid :
    ‚ñ≥{tid} <pers> P ‚ä¢ <pers> ‚ñ≥{tid} P.
  Proof.
    unseal. rewrite bi.persistently_exist. setoid_rewrite bi.persistently_sep.
    setoid_rewrite view_at_persistently.
    by setoid_rewrite <-(bi.persistent_persistently_2 ‚é° own _ _ ‚é§).
  Qed.
  Lemma rel_persistently_if P tid b :
    ‚ñ≥{tid} <pers>?b P ‚ä¢ <pers>?b ‚ñ≥{tid} P.
  Proof. destruct b; [apply rel_persistently|done]. Qed.

  Lemma rel_intuitionistically P tid :
    ‚ñ° ‚ñ≥{tid} P ‚ä¢ ‚ñ≥{tid} ‚ñ° P.
  Proof.
    unseal. rewrite bi.intuitionistically_exist.
    setoid_rewrite bi.intuitionistically_sep.
    setoid_rewrite view_at_intuitionistically.
    by setoid_rewrite (bi.intuitionistically_elim ‚é° own _ _ ‚é§).
  Qed.
  Lemma rel_intuitionistically_if P tid b :
    ‚ñ°?b ‚ñ≥{tid} P ‚ä¢ ‚ñ≥{tid} ‚ñ°?b P.
  Proof. destruct b; [apply rel_intuitionistically|done]. Qed.

  Lemma rel_at_unfold P tid ùì• V :
    (‚ñ≥{tid} P) V -‚àó own tid (‚óè to_latT ùì•)
    -‚àó P ùì•.(frel) ‚àó own tid (‚óè to_latT ùì•).
  Proof.
    iIntros "P oL". unseal. iDestruct "P" as (ùì•') "[own P]".
    iDestruct (own_lat_auth_max with "oL own") as %SUB%tview_sqsubseteq_frel.
    rewrite view_at_unfold_2.
    by iFrame.
  Qed.

  Lemma rel_at_intro P tid V :
    ‚ñ≥{tid} (‚äíV) -‚àó @{V} P -‚àó ‚ñ≥{tid} P.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[oV %LE]". iIntros "P".
    iExists _. iFrame "oV". iFrame "P".
  Qed.

  (** Acquire modality *)
  Lemma acq_mono_objectively P Q tid :
    ‚ñΩ{tid} P ‚àó <obj> (P -‚àó Q) ‚ä¢ ‚ñΩ{tid} Q.
  Proof.
    unseal. iIntros "[rel obj]".
    iDestruct "rel" as (ùì•) "[own P]".
    iExists ùì•. iFrame "own". by iApply (view_at_objectively with "obj").
  Qed.

  Lemma acq_mono P Q tid :
    (P ‚ä¢ Q) ‚Üí ‚ñΩ{tid} P ‚ä¢ ‚ñΩ{tid} Q.
  Proof.
    iIntros (PQ). unseal. iDestruct 1 as (ùì•) "[own P]".
    iExists ùì•. iFrame "own". by rewrite PQ.
  Qed.

  Lemma acq_pure_elim œÜ tid :
    (‚ñΩ{tid} ‚åú œÜ ‚åù) ‚ä¢ ‚åú œÜ ‚åù.
  Proof.
    unseal. iDestruct (1) as (?) "[_ ?]". by rewrite view_at_pure.
  Qed.

  Lemma acq_and_elim P Q tid :
    ‚ñΩ{tid} (P ‚àß Q) ‚ä¢ ‚ñΩ{tid} P ‚àß ‚ñΩ{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own PQ]".
    iSplit; iExists ùì•; iFrame "#"; by [rewrite bi.and_elim_l|rewrite bi.and_elim_r].
  Qed.

  Lemma acq_or_elim P Q tid :
    ‚ñΩ{tid} (P ‚à® Q) ‚ä¢ ‚ñΩ{tid} P ‚à® ‚ñΩ{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own [P|Q]]";
      [iLeft|iRight]; iExists ùì•; by iFrame "#".
  Qed.

  Lemma acq_or_intro P Q tid :
    ‚ñΩ{tid} P ‚à® ‚ñΩ{tid} Q ‚ä¢ ‚ñΩ{tid} (P ‚à® Q).
  Proof.
    unseal. iIntros "[P|Q]".
    - iDestruct "P" as (ùì•) "[own P]". iExists _. by iFrame.
    - iDestruct "Q" as (ùì•) "[own Q]". iExists _. by iFrame.
  Qed.

  Lemma acq_or P Q tid :
    ‚ñΩ{tid} P ‚à® ‚ñΩ{tid} Q ‚ä£‚ä¢ ‚ñΩ{tid} (P ‚à® Q).
  Proof. iSplit; [by iApply acq_or_intro|by iApply acq_or_elim]. Qed.

  Lemma acq_exist {A: Type} (Œ®: A ‚Üí vProp) tid :
    (‚ñΩ{tid} ‚àÉ x, Œ® x) ‚ä£‚ä¢ ‚àÉ x, ‚ñΩ{tid} Œ® x.
  Proof.
    unseal. setoid_rewrite view_at_exist. setoid_rewrite bi.sep_exist_l.
    by rewrite bi.exist_exist.
  Qed.

  Lemma acq_forall_elim {A: Type} (Œ®: A ‚Üí vProp) tid :
    (‚ñΩ{tid} ‚àÄ x, Œ® x) ‚ä¢ ‚àÄ x, ‚ñΩ{tid} Œ® x.
  Proof.
    unseal. setoid_rewrite view_at_forall. setoid_rewrite bi.sep_forall_l.
    by rewrite bi.exist_forall.
  Qed.

  Lemma acq_sep_elim P Q tid :
    ‚ñΩ{tid} (P ‚àó Q) ‚ä¢ ‚ñΩ{tid} P ‚àó ‚ñΩ{tid} Q.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[#own [P Q]]". iSplitL "P"; iExists ùì•; by iFrame "#".
  Qed.

  Lemma acq_sep_intro P Q tid :
     ‚ñΩ{tid} P ‚àó ‚ñΩ{tid} Q ‚ä¢ ‚ñΩ{tid} (P ‚àó Q).
  Proof.
    unseal. iIntros "[P Q]".
    iDestruct "P" as (ùì•1) "[#own1 P]". iDestruct "Q" as (ùì•2) "[#own2 Q]".
    iExists (ùì•1 ‚äî ùì•2). iFrame "P Q".
    rewrite -lat_op_join' auth_frag_op own_op. by iFrame "own1 own2".
  Qed.

  Lemma acq_sep P Q tid :
    ‚ñΩ{tid} P ‚àó ‚ñΩ{tid} Q ‚ä£‚ä¢ ‚ñΩ{tid} (P ‚àó Q).
  Proof. iSplit; [by iApply acq_sep_intro|by iApply acq_sep_elim]. Qed.

  Lemma acq_wand_1 P Q tid :
    ‚ñΩ{tid} (P -‚àó Q) ‚ä¢ (‚ñΩ{tid} P -‚àó ‚ñΩ{tid} Q).
  Proof.
    unseal. iDestruct 1 as (ùì•1) "[own1 PQ]". iDestruct 1 as (ùì•2) "[own2 P]".
    iExists (join ùì•1 ùì•2). iSplitL "own1 own2".
    - rewrite -lat_op_join' auth_frag_op own_op. by iFrame.
    - iApply (view_at_mono_2 with "PQ [P]"); [solve_lat|]. by iFrame.
  Qed.

  Lemma acq_later_elim P tid :
    (‚ñΩ{tid} ‚ñ∑ P) ‚ä¢ ‚ñ∑ ‚ñΩ{tid} P.
  Proof.
    unseal. iDestruct 1 as (?) "[own P]". rewrite view_at_later. iExists _. by iFrame.
  Qed.
  Lemma acq_laterN_elim P tid n :
    (‚ñΩ{tid} ‚ñ∑^n P) ‚ä¢ ‚ñ∑^n ‚ñΩ{tid} P.
  Proof.
    unseal. iDestruct 1 as (?) "[own P]". rewrite view_at_laterN. iExists _. by iFrame.
  Qed.
  Lemma acq_except_0 P tid : ‚ñΩ{tid} ‚óá P ‚ä¢ ‚óá ‚ñΩ{tid} P.
  Proof.
    unseal. rewrite bi.except_0_exist.
    setoid_rewrite bi.except_0_sep. setoid_rewrite view_at_except_0.
    by setoid_rewrite <-(bi.except_0_intro (‚é° own _ _ ‚é§)).
  Qed.

  Lemma acq_bupd P tid : (‚ñΩ{tid} |==> P) ‚ä¢ |==> ‚ñΩ{tid} P.
  Proof.
    unseal. rewrite -bupd_exist. setoid_rewrite <-bupd_sep.
    setoid_rewrite view_at_bupd.
    by setoid_rewrite <-(bupd_intro (‚é° own _ _ ‚é§)).
  Qed.
  Lemma acq_fupd `{fancy_updates.invGS Œ£} (E1 E2 : coPset) P tid :
    ‚ñΩ{tid} (|={E1,E2}=> P) ‚ä¢ |={E1,E2}=> ‚ñΩ{tid} P.
  Proof. unseal. iDestruct 1 as (ùì•) "[own >P]". eauto. Qed.

  Lemma acq_objectively_elim P tid :
    (‚ñΩ{tid} <obj> P) ‚ä¢ <obj> P.
  Proof.
    unseal. iDestruct 1 as (?) "[_ P]". by rewrite view_at_objective_iff.
  Qed.

  Lemma acq_embed_elim (P: iProp) tid :
    (‚ñΩ{tid} ‚é° P ‚é§) ‚ä¢ ‚é° P ‚é§.
  Proof.
    unseal. iDestruct (1) as (?) "[_ ?]". by rewrite view_at_embed.
  Qed.

  Lemma acq_subjective P tid :
    ‚ñΩ{tid} P ‚ä¢ <subj> P.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[_ P]". by rewrite view_at_subjectively.
  Qed.

  Lemma acq_affinely P tid :
    <affine> ‚ñΩ{tid} P ‚ä¢ ‚ñΩ{tid} <affine> P.
  Proof.
    unseal. rewrite bi.affinely_exist. setoid_rewrite bi.affinely_sep.
    setoid_rewrite view_at_affinely.
    by setoid_rewrite (bi.affinely_elim ‚é° own _ _ ‚é§).
  Qed.
  Lemma acq_affinely_if P tid b :
    <affine>?b ‚ñΩ{tid} P ‚ä¢ ‚ñΩ{tid} <affine>?b P.
  Proof. destruct b; [apply acq_affinely|done]. Qed.

  Lemma acq_persistently P tid :
    ‚ñΩ{tid} <pers> P ‚ä¢ <pers> ‚ñΩ{tid} P.
  Proof.
    unseal. rewrite bi.persistently_exist. setoid_rewrite bi.persistently_sep.
    setoid_rewrite view_at_persistently.
    by setoid_rewrite <-(bi.persistent_persistently_2 ‚é° own _ _ ‚é§).
  Qed.
  Lemma acq_persistently_if P tid b :
    ‚ñΩ{tid} <pers>?b P ‚ä¢ <pers>?b ‚ñΩ{tid} P.
  Proof. destruct b; [apply acq_persistently|done]. Qed.

  Lemma acq_intuitionistically P tid :
    ‚ñ° ‚ñΩ{tid} P ‚ä¢ ‚ñΩ{tid} ‚ñ° P.
  Proof.
    unseal. rewrite bi.intuitionistically_exist.
    setoid_rewrite bi.intuitionistically_sep.
    setoid_rewrite view_at_intuitionistically.
    by setoid_rewrite (bi.intuitionistically_elim ‚é° own _ _ ‚é§).
  Qed.
  Lemma acq_intuitionistically_if P tid b :
    ‚ñ°?b ‚ñΩ{tid} P ‚ä¢ ‚ñΩ{tid} ‚ñ°?b P.
  Proof. destruct b; [apply acq_intuitionistically|done]. Qed.

  Lemma acq_at_unfold P tid ùì• V :
    (‚ñΩ{tid} P) V -‚àó own tid (‚óè to_latT ùì•)
      -‚àó P ùì•.(acq) ‚àó own tid (‚óè to_latT ùì•).
  Proof.
    iIntros "P oL". unseal. iDestruct "P" as (ùì•') "[own P]".
    iDestruct (own_lat_auth_max with "oL own") as %SUB%tview_sqsubseteq_acq.
    rewrite view_at_unfold_2.
    by iFrame.
  Qed.

  Lemma acq_at_intro P tid V :
    ‚ñΩ{tid} (‚äíV) -‚àó @{V} P -‚àó ‚ñΩ{tid} P.
  Proof.
    unseal. iDestruct 1 as (ùì•) "[oV %LE]". iIntros "P".
    iExists _. iFrame "oV". iFrame "P".
  Qed.

  (* TODO: more Proper instances *)
  Global Instance rel_mod_ne tid : NonExpansive (rel_mod tid).
  Proof. unseal. solve_proper. Qed.
  Global Instance rel_mod_proper tid : Proper ((‚â°) ==> (‚â°)) (rel_mod tid).
  Proof. apply (ne_proper _). Qed.
  Global Instance rel_mod_mono tid : Proper ((‚ä¢) ==> (‚ä¢)) (rel_mod tid).
  Proof. intros ??. apply rel_mono. Qed.
  Global Instance rel_mod_flip_mono tid : Proper (flip (‚ä¢) ==> flip (‚ä¢)) (rel_mod tid).
  Proof. intros ??. apply rel_mono. Qed.

  Global Instance acq_mod_ne tid : NonExpansive (acq_mod tid).
  Proof. unseal. solve_proper. Qed.
  Global Instance acq_mod_proper tid : Proper ((‚â°) ==> (‚â°)) (acq_mod tid).
  Proof. apply (ne_proper _). Qed.
  Global Instance acq_mod_mono tid : Proper ((‚ä¢) ==> (‚ä¢)) (acq_mod tid).
  Proof. intros ??. apply acq_mono. Qed.
  Global Instance acq_mod_flip_mono tid : Proper (flip (‚ä¢) ==> flip (‚ä¢)) (acq_mod tid).
  Proof. intros ??. apply acq_mono. Qed.

  Global Instance rel_persistent P tid :
    Persistent P ‚Üí Persistent (‚ñ≥{tid} P).
  Proof. unseal. apply _. Qed.
  Global Instance rel_timeless P tid :
    Timeless P ‚Üí Timeless (‚ñ≥{tid} P).
  Proof. unseal. apply _. Qed.

  Global Instance acq_persistent P tid :
    Persistent P ‚Üí Persistent (‚ñΩ{tid} P).
  Proof. unseal. apply _. Qed.
  Global Instance acq_timeless P tid :
    Timeless P ‚Üí Timeless (‚ñΩ{tid} P).
  Proof. unseal. apply _. Qed.

End RelAcqProp.

Section proofmode.
  Context `{histGS Œ£}.
  Local Notation vProp := (vProp Œ£).
  Local Notation iProp := (iProp Œ£).
  Implicit Types (P Q: vProp).

  (** Release modality *)
  Global Instance into_pure_rel_mod (œÜ : Prop) P tid :
    IntoPure P œÜ ‚Üí IntoPure (‚ñ≥{tid} P) œÜ.
  Proof. rewrite /IntoPure=> ->. by rewrite rel_pure_elim. Qed.
  (* No FromPure instance because that direction needs a [bupd]. *)

  Global Instance into_wand_rel_mod p q R P Q tid :
    IntoWand p q R P Q ‚Üí IntoWand p q (‚ñ≥{tid} R) (‚ñ≥{tid} P) (‚ñ≥{tid} Q).
  Proof.
    rewrite /IntoWand !rel_intuitionistically_if => ->. by rewrite rel_wand_1.
  Qed.

  Global Instance into_sep_rel_mod P Q1 Q2 tid :
    IntoSep P Q1 Q2 ‚Üí IntoSep (‚ñ≥{tid} P) (‚ñ≥{tid} Q1) (‚ñ≥{tid} Q2).
  Proof. by rewrite /IntoSep rel_sep => ->. Qed.
  Global Instance from_sep_rel_mod P Q1 Q2 tid :
    FromSep P Q1 Q2 ‚Üí FromSep (‚ñ≥{tid} P) (‚ñ≥{tid} Q1) (‚ñ≥{tid} Q2).
  Proof. by rewrite /FromSep rel_sep => ->. Qed.
  Global Instance maybe_combine_sep_as_rel_mod P Q1 Q2 tid progress :
    MaybeCombineSepAs P Q1 Q2 progress ‚Üí
    MaybeCombineSepAs (‚ñ≥{tid} P) (‚ñ≥{tid} Q1) (‚ñ≥{tid} Q2) progress.
  Proof. by rewrite /MaybeCombineSepAs rel_sep => ->. Qed.

  Global Instance into_or_rel_mod P Q1 Q2 tid :
    IntoOr P Q1 Q2 ‚Üí IntoOr (‚ñ≥{tid} P) (‚ñ≥{tid} Q1) (‚ñ≥{tid} Q2).
  Proof. by rewrite /IntoOr rel_or => ->. Qed.
  Global Instance from_or_rel_mod P Q1 Q2 tid :
    FromOr P Q1 Q2 ‚Üí FromOr (‚ñ≥{tid} P) (‚ñ≥{tid} Q1) (‚ñ≥{tid} Q2).
  Proof. by rewrite /FromOr rel_or => ->. Qed.

  Global Instance into_exist_rel_mod {A} P tid (Œ¶ : A ‚Üí vProp) name :
    IntoExist P Œ¶ name ‚Üí IntoExist (‚ñ≥{tid} P) (Œª a, (‚ñ≥{tid} Œ¶ a)%I) name.
  Proof. by rewrite /IntoExist -rel_exist => ->. Qed.
  Global Instance from_exist_rel_mod {A} P tid (Œ¶ : A ‚Üí vProp) :
    FromExist P Œ¶ ‚Üí FromExist (‚ñ≥{tid} P) (Œª a, (‚ñ≥{tid} Œ¶ a)%I).
  Proof. by rewrite /FromExist -rel_exist => ->. Qed.

  Global Instance into_forall_rel_mod {A} P tid (Œ¶ : A ‚Üí vProp) :
    IntoForall P Œ¶ ‚Üí IntoForall (‚ñ≥{tid} P) (Œª a, (‚ñ≥{tid} Œ¶ a)%I).
  Proof. by rewrite /IntoForall -rel_forall_elim => ->. Qed.
  (* No FromForall instance. *)

  Global Instance into_later_rel_mod n P Q tid :
    IntoLaterN false n P Q ‚Üí IntoLaterN false n (‚ñ≥{tid} P) (‚ñ≥{tid} Q).
  Proof. rewrite /IntoLaterN /MaybeIntoLaterN => ->. by rewrite rel_laterN_elim. Qed.

  Global Instance from_modal_id_rel_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_id sel P Q ‚Üí
    FromModal œÜ modality_id sel (‚ñ≥{tid} P) (‚ñ≥{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. rewrite HPQ //. Qed.

  Global Instance from_modal_affinely_rel_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_affinely sel P Q ‚Üí
    FromModal œÜ modality_affinely sel (‚ñ≥{tid} P) (‚ñ≥{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. by rewrite -HPQ // rel_affinely. Qed.
  Global Instance from_modal_intuitionistically_rel_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_intuitionistically sel P Q ‚Üí
    FromModal œÜ modality_intuitionistically sel (‚ñ≥{tid} P) (‚ñ≥{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. by rewrite -HPQ // rel_intuitionistically. Qed.

  Global Instance elim_modal_rel_mod_bupd_hyp p p' œÜ P P' Q Q' tid :
    ElimModal œÜ p p' (|==> ‚ñ≥{tid} P)%I P' Q Q' ‚Üí
    ElimModal œÜ p p' (‚ñ≥{tid} |==> P) P' Q Q'.
  Proof. by rewrite /ElimModal !rel_bupd. Qed.

  Global Instance elim_modal_rel_mod_fupd_hyp `{fancy_updates.invGS Œ£}
      p p' œÜ E1 E2 P P' Q Q' tid :
    ElimModal œÜ p p' (|={E1,E2}=> ‚ñ≥{tid} P)%I P' Q Q' ‚Üí
    ElimModal œÜ p p' (‚ñ≥{tid} |={E1,E2}=> P) P' Q Q'.
  Proof. by rewrite /ElimModal rel_fupd. Qed.

  (** Acquire modality *)
  Global Instance into_pure_acq_mod (œÜ : Prop) P tid :
    IntoPure P œÜ ‚Üí IntoPure (‚ñΩ{tid} P) œÜ.
  Proof. rewrite /IntoPure=> ->. by rewrite acq_pure_elim. Qed.
  (* No FromPure instance because that direction needs a [bupd]. *)

  Global Instance into_wand_acq_mod p q R P Q tid :
    IntoWand p q R P Q ‚Üí IntoWand p q (‚ñΩ{tid} R) (‚ñΩ{tid} P) (‚ñΩ{tid} Q).
  Proof.
    rewrite /IntoWand !acq_intuitionistically_if => ->. by rewrite acq_wand_1.
  Qed.

  Global Instance into_sep_acq_mod P Q1 Q2 tid :
    IntoSep P Q1 Q2 ‚Üí IntoSep (‚ñΩ{tid} P) (‚ñΩ{tid} Q1) (‚ñΩ{tid} Q2).
  Proof. by rewrite /IntoSep acq_sep => ->. Qed.
  Global Instance from_sep_acq_mod P Q1 Q2 tid :
    FromSep P Q1 Q2 ‚Üí FromSep (‚ñΩ{tid} P) (‚ñΩ{tid} Q1) (‚ñΩ{tid} Q2).
  Proof. by rewrite /FromSep acq_sep => ->. Qed.
  Global Instance maybe_combine_sep_as_acq_mod P Q1 Q2 tid progress :
    MaybeCombineSepAs P Q1 Q2 progress ‚Üí
    MaybeCombineSepAs (‚ñΩ{tid} P) (‚ñΩ{tid} Q1) (‚ñΩ{tid} Q2) progress.
  Proof. by rewrite /MaybeCombineSepAs acq_sep => ->. Qed.

  Global Instance into_or_acq_mod P Q1 Q2 tid :
    IntoOr P Q1 Q2 ‚Üí IntoOr (‚ñΩ{tid} P) (‚ñΩ{tid} Q1) (‚ñΩ{tid} Q2).
  Proof. by rewrite /IntoOr acq_or => ->. Qed.
  Global Instance from_or_acq_mod P Q1 Q2 tid :
    FromOr P Q1 Q2 ‚Üí FromOr (‚ñΩ{tid} P) (‚ñΩ{tid} Q1) (‚ñΩ{tid} Q2).
  Proof. by rewrite /FromOr acq_or => ->. Qed.

  Global Instance into_exist_acq_mod {A} P tid (Œ¶ : A ‚Üí vProp) name :
    IntoExist P Œ¶ name ‚Üí IntoExist (‚ñΩ{tid} P) (Œª a, (‚ñΩ{tid} Œ¶ a)%I) name.
  Proof. by rewrite /IntoExist -acq_exist => ->. Qed.
  Global Instance from_exist_acq_mod {A} P tid (Œ¶ : A ‚Üí vProp) :
    FromExist P Œ¶ ‚Üí FromExist (‚ñΩ{tid} P) (Œª a, (‚ñΩ{tid} Œ¶ a)%I).
  Proof. by rewrite /FromExist -acq_exist => ->. Qed.

  Global Instance into_forall_acq_mod {A} P tid (Œ¶ : A ‚Üí vProp) :
    IntoForall P Œ¶ ‚Üí IntoForall (‚ñΩ{tid} P) (Œª a, (‚ñΩ{tid} Œ¶ a)%I).
  Proof. by rewrite /IntoForall -acq_forall_elim => ->. Qed.
  (* No FromForall instance. *)

  Global Instance into_later_acq_mod n P Q tid :
    IntoLaterN false n P Q ‚Üí IntoLaterN false n (‚ñΩ{tid} P) (‚ñΩ{tid} Q).
  Proof. rewrite /IntoLaterN /MaybeIntoLaterN => ->. by rewrite acq_laterN_elim. Qed.

  Global Instance from_modal_id_acq_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_id sel P Q ‚Üí
    FromModal œÜ modality_id sel (‚ñΩ{tid} P) (‚ñΩ{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. rewrite HPQ //. Qed.

  Global Instance from_modal_affinely_acq_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_affinely sel P Q ‚Üí
    FromModal œÜ modality_affinely sel (‚ñΩ{tid} P) (‚ñΩ{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. by rewrite -HPQ // acq_affinely. Qed.
  Global Instance from_modal_intuitionistically_acq_mod œÜ `(sel : A) P Q tid :
    FromModal œÜ modality_intuitionistically sel P Q ‚Üí
    FromModal œÜ modality_intuitionistically sel (‚ñΩ{tid} P) (‚ñΩ{tid} Q) | 100.
  Proof. rewrite /FromModal /= =>HPQ ?. by rewrite -HPQ // acq_intuitionistically. Qed.

  Global Instance elim_modal_acq_mod_bupd_hyp p p' œÜ P P' Q Q' tid :
    ElimModal œÜ p p' (|==> ‚ñΩ{tid} P)%I P' Q Q' ‚Üí
    ElimModal œÜ p p' (‚ñΩ{tid} |==> P) P' Q Q'.
  Proof. by rewrite /ElimModal !acq_bupd. Qed.

  Global Instance elim_modal_acq_mod_fupd_hyp `{fancy_updates.invGS Œ£}
      p p' œÜ E1 E2 P P' Q Q' tid :
    ElimModal œÜ p p' (|={E1,E2}=> ‚ñΩ{tid} P)%I P' Q Q' ‚Üí
    ElimModal œÜ p p' (‚ñΩ{tid} |={E1,E2}=> P) P' Q Q'.
  Proof. by rewrite /ElimModal acq_fupd. Qed.
End proofmode.
